//
//  HNCFLocation.m
//  HNCF
//
//  Created by Apple on 15/11/18.
//  Copyright © 2015年 hsy. All rights reserved.
//

#import "HNCFLocation.h"
#import "HNCFCommmon.h"
@interface HNCFLocation ()<CLLocationManagerDelegate>
{
    CLLocationManager *manager11;
    
    // block的申明 定义
    void (^saveGpsCallback) (double lat, double lng ,NSString *city);
}
@end
@implementation HNCFLocation
+ (id) sharedGpsManager {
    static id s;
    if (s == nil) {
        s = [[HNCFLocation alloc] init];
    }
    return s;
}
- (id)init {
    self = [super init];
    if (self) {
        // 打开定位 然后得到数据
        manager11 = [[CLLocationManager alloc] init];
        manager11.delegate = self;
        manager11.desiredAccuracy = kCLLocationAccuracyBest;
        
        // 兼容iOS8.0版本
        /* Info.plist里面加上2项
         NSLocationAlwaysUsageDescription      Boolean YES
         NSLocationWhenInUseUsageDescription   Boolean YES
         */
        
        // 请求授权 requestWhenInUseAuthorization用在>=iOS8.0上
        // respondsToSelector: 前面manager是否有后面requestWhenInUseAuthorization方法
        // 1. 适配 动态适配
        //        if ([manager11 respondsToSelector:@selector(requestWhenInUseAuthorization)]) {
        //            [manager11 requestWhenInUseAuthorization];
        //            [manager11 requestAlwaysAuthorization];
        //        }
        //        // 2. 另外一种适配 systemVersion 有可能是 8.1.1
        //        float osVersion = [[[UIDevice currentDevice] systemVersion] floatValue];
        //        if (osVersion >= 8) {
        //            [manager11 requestWhenInUseAuthorization];
        //            [manager11 requestAlwaysAuthorization];
        //        }
    }
    return self;
}
- (void) getGps:(  void (^)(double lat, double lng ,NSString *city) )cb {
    if ([CLLocationManager locationServicesEnabled] == FALSE) {
        return;
    }
    // block一般赋值需要copy
    saveGpsCallback = [cb copy];
    
    // 停止上一次的
    [manager11 stopUpdatingLocation];
    // 开始新的数据定位
    [manager11 startUpdatingLocation];
}

+ (void) getGps:(  void (^)(double lat, double lng ,NSString *city) )cb {
    [[HNCFLocation sharedGpsManager] getGps:cb];
}

- (void) stop {
    [manager11 stopUpdatingLocation];
}
+ (void) stop {
    [[HNCFLocation sharedGpsManager] stop];
}
- (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status {
    switch (status) {
            
        case kCLAuthorizationStatusNotDetermined:
            if ([manager respondsToSelector:@selector(requestAlwaysAuthorization)]) {
                [manager requestWhenInUseAuthorization];
            }break;
        default:break;
    }
}
// 每隔一段时间就会调用
- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations {
    for (CLLocation *loc in locations) {
        CLLocationCoordinate2D l = loc.coordinate;
        double lat = l.latitude;
        double lnt = l.longitude;
        
        //------------------位置反编码---5.0之后使用-----------------
        CLGeocoder *geocoder = [[CLGeocoder alloc] init];
        [geocoder reverseGeocodeLocation:loc
                       completionHandler:^(NSArray *placemarks, NSError *error){
                           
                           for (CLPlacemark *place in placemarks) {
                               NSString *city = [[NSString stringWithFormat:@"%@",place.name]stringByReplacingOccurrencesOfString:@"中国山西省" withString:@"" ];
                               if (!city||[city isEqualToString:@"(null)"]) {
                                   city = @"太原";
                               }
                               // 使用blocks 调用blocks
                               if (saveGpsCallback) {
                                   saveGpsCallback(lat, lnt ,city);
                               }
                               
                               
//                                                          NSLog(@"thoroughfare,%@",place.name);                        // 位置
//                                                          NSLog(@"thoroughfare,%@",place.thoroughfare);                // 街道
//                                                          NSLog(@"subThoroughfare,%@",place.subThoroughfare);          // 子街道
//                                                          NSLog(@"locality,%@",place.locality);                        // 市
//                                                          NSLog(@"subLocality,%@",place.subLocality);                  // 区
//                                                          NSLog(@"country,%@",place.country);                          // 国家
                          
                           }
                           
                       }];
        
        
    }
}
@end
